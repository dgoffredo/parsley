#lang racket

(provide print-schema)

(require "version.rkt"
         "types.rkt"
         sxml)

(define (print-schema types grammar-text output-port)
  (let ([schema (schema-types->sxml types grammar-text *parsley-version*)])
    (srl:sxml->xml schema output-port)))

(define (with-ns name)
  (~a 'xsd: name))

(define (type->attributes type)
  "Return a list of name/value pairs describing the type and occurence of an
   SXML sequence or choice element having the specified @var{type}. The pairs
   are suitable for inclusion in an SXML attribute list."
  (match type
    [(scalar   (kind name)) `((type ,(with-ns name)))]
    [(array    (kind name)) `((type ,(with-ns name)) 
                              (minOccurs "0") (maxOccurs "unbounded"))]
    [(nullable (kind name)) `((type ,(with-ns name))
                              (minOccurs "0"))]))

(define (elements->sxml element-types)
  (for/list ([element element-types])
    (match element
      [(list name type)
       `(xsd:element (@ (name ,(~a name)) ,@(type->attributes type)))])))

(define (complex-type->sxml which name element-types)
  `(xsd:complexType (@ (name ,(~a name)))
      (,which
        ,@(elements->sxml element-types))))

(define (enumeration->sxml name values)
  `(xsd:simpleType (@ (name ,(~a name)))
     (restriction (@ (base ,(with-ns 'string)))
       ,@(for/list ([value values])
           `(xsd:enumeration (@ (value ,value)))))))

(define (schema-annotation grammar-text parsley-version)
  `(xsd:annotation
     (xsd:documentation
       ,(~a "\nThis schema was generated by parsley version " parsley-version
          " from the following grammar:\n\n" grammar-text "\n"))))

(define xsd-namespace "http://www.w3.org/2001/XMLSchema")

(define (schema-types->sxml types grammar-text parsley-version)
  "Return an SXML representation of an XSD describing the specified
   @var{types}."
  ; I put everything in the XSD namespace (including the types) and refer to it
  ; using the alias "xsd". It has to be exactly "xsd", because if I choose any
  ; other alias, srl:sxml->xml will just rewrite it as "xsd", but the values
  ; of type attributes will not be changed, so code generators will complain.
  ; Suffice it to say, "'xsd' namespace everywhere for everything" is the
  ; simplest option.
  `(*TOP*
     (@ (*NAMESPACES* (xsd ,xsd-namespace)))
     (*PI* xml "version=\"1.0\" encoding=\"UTF-8\"")
     (xsd:schema (@ (targetNamespace ,xsd-namespace))
       ,(schema-annotation grammar-text parsley-version)
       ,@(for/list ([type types])
           (match type
             [(schema/sequence name _ element-types)
              (complex-type->sxml 'xsd:sequence name element-types)]
             [(schema/choice name _ element-types)
              (complex-type->sxml 'xsd:choice name element-types)]
             [(schema/enumeration name _ values)
              (enumeration->sxml name values)])))))
